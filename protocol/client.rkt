#lang racket

(require racket/udp)
(include "globals.rkt")

(define (add-pkt bstr-pkt pkts)
  (define (bstr-pkt->pkt bstr-pkt)
    (cons (extract-seq-num bstr-pkt) (list (subbytes bstr-pkt PKT-HEADER-SIZE))))
  (define pkt (bstr-pkt->pkt bstr-pkt))
  (if (assoc (first pkt) pkts)
    pkts
    (cons pkt pkts)))

(define (in-window? seq-num base)
  (and (>= seq-num base)
       (<= seq-num (+ base (sub1 WINDOW-SIZE)))))

(define (in-last-window? seq-num base)
  (and (>= seq-num (- base WINDOW-SIZE))
       (<= seq-num (sub1 base))))

(define (start [output-file-name OUTPUT-FILE])
  (define sock (udp-open-socket))
  (define out-file (open-output-file output-file-name #:exists 'replace))
  (define buf (make-bytes PKT-SIZE))
  (define (writer prev counter base pkts)
    (cond ((empty? pkts) (receiver (+ base counter) '()))
          ((= (caar pkts) (add1 prev))
           (write-bytes (second (car pkts)) out-file)
           (writer (caar pkts) (add1 counter) base (cdr pkts)))
          (else (receiver (+ base counter) pkts))))
  (define (receiver base pkts [time 0])
    (match-define-values (num-bytes _ _) (udp-receive!* sock buf))
    (cond (num-bytes
            (define bstr-pkt (subbytes buf 0 num-bytes))
            (define seq-num (extract-seq-num bstr-pkt))
            (cond ((and (data-bstr-pkt? bstr-pkt)
                        (in-window? seq-num base))
                   (send-to-server sock (make-header seq-num ACK))
                   (if (= seq-num base)
                     (writer (sub1 base) 0 base (add-pkt bstr-pkt pkts))
                     (receiver base (add-pkt bstr-pkt pkts))))
                  ((and (data-bstr-pkt? bstr-pkt)
                        (in-last-window? seq-num base))
                   (send-to-server sock (make-header seq-num ACK))
                   (receiver base pkts))
                  ((fin-bstr-pkt? bstr-pkt)
                   (write-bytes (apply bytes-append (map second (sort pkts < #:key car))) out-file)
                   (send-to-server sock (make-header 0 ACK))
                   (displayln "File saved. Shutting down client."))
                  (else (receiver base pkts))))
          (else (cond ((and (= base 0) (empty? pkts) (< (+ TIMEOUT time) (current-seconds)))
                       (send-to-server sock (make-header 0 SYN))
                       (receiver base pkts (current-seconds)))
                      (else (receiver base pkts time))))))
  (udp-bind! sock ADDR CLIENT-PORT)
  (udp-set-receive-buffer-size! sock (max (* 1024 1024) (* 2 PKT-SIZE WINDOW-SIZE)))
  (send-to-server sock (make-header 0 SYN))
  (receiver 0 '()  (current-seconds))
  (close-output-port out-file))

(start)

